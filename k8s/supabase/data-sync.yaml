apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-sync
  namespace: platform
  labels:
    app: data-sync
    app.kubernetes.io/name: data-sync
    app.kubernetes.io/version: "2025.10"
    app.kubernetes.io/component: sync
    app.kubernetes.io/part-of: supabase-stack
spec:
  schedule: "*/15 * * * *"  # Every 15 minutes
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  startingDeadlineSeconds: 300
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 600  # 10 minutes timeout
      template:
        metadata:
          labels:
            app: data-sync
            app.kubernetes.io/name: data-sync
            app.kubernetes.io/component: sync
          annotations:
            prometheus.io/scrape: "false"
        spec:
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: data-sync
              image: curlimages/curl:8.10.1  # Updated to latest stable version
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  
                  echo "$(date): Starting data sync..."
                  
                  # Fetch data with retry logic
                  for i in {1..3}; do
                    if curl -fsSL --max-time 30 --retry 3 --retry-delay 5 \
                      -H "User-Agent: Supabase-DataSync/2025.10" \
                      -H "Accept: application/json" \
                      "${DATA_SOURCE_URL}" -o /tmp/data.json; then
                      echo "$(date): Data fetched successfully on attempt $i"
                      break
                    else
                      echo "$(date): Failed to fetch data on attempt $i"
                      if [ $i -eq 3 ]; then
                        echo "$(date): All fetch attempts failed"
                        exit 1
                      fi
                      sleep 10
                    fi
                  done
                  
                  # Validate JSON
                  if ! jq empty /tmp/data.json 2>/dev/null; then
                    echo "$(date): Invalid JSON received"
                    exit 1
                  fi
                  
                  # Post to Supabase with retry logic
                  for i in {1..3}; do
                    if curl -fsSL --max-time 60 --retry 3 --retry-delay 5 \
                      -X POST \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer ${SERVICE_ROLE_KEY}" \
                      -H "apikey: ${SERVICE_ROLE_KEY}" \
                      -H "Prefer: resolution=merge-duplicates" \
                      -d @/tmp/data.json \
                      "${SUPABASE_URL}/rest/v1/gameinfo_samples"; then
                      echo "$(date): Data synced successfully on attempt $i"
                      break
                    else
                      echo "$(date): Failed to sync data on attempt $i"
                      if [ $i -eq 3 ]; then
                        echo "$(date): All sync attempts failed"
                        exit 1
                      fi
                      sleep 15
                    fi
                  done
                  
                  echo "$(date): Data sync completed successfully"
              env:
                - name: DATA_SOURCE_URL
                  value: "https://raw.githubusercontent.com/<your-github-owner>/Perplexity Idea/main/data/gameinfo-samples.json"
                - name: SUPABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: supabase-secrets
                      key: SUPABASE_URL
                - name: SERVICE_ROLE_KEY
                  valueFrom:
                    secretKeyRef:
                      name: supabase-secrets
                      key: SERVICE_ROLE_KEY
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: false  # Need write access for temp files
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
                capabilities:
                  drop:
                    - ALL
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "50m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
          volumes:
            - name: tmp
              emptyDir:
                sizeLimit: 100Mi