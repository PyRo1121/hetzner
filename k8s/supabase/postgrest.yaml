apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgrest
  namespace: platform
  labels:
    app: postgrest
    app.kubernetes.io/name: postgrest
    app.kubernetes.io/version: "2025.10"
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: supabase-stack
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: postgrest
  template:
    metadata:
      labels:
        app: postgrest
        app.kubernetes.io/name: postgrest
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: postgrest
          image: postgrest/postgrest:v13.0.0  # Updated to latest stable version with enhanced JWT validation
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: PGRST_DB_URI
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: DB_URL
            - name: PGRST_DB_SCHEMAS
              value: "public,storage,graphql_public"
            - name: PGRST_DB_ANON_ROLE
              value: "anon"
            - name: PGRST_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: supabase-secrets
                  key: JWT_SECRET
            - name: PGRST_OPENAPI_PROXY_URI
              value: "https://${DOMAIN}/rest/v1/"
            - name: PGRST_LOG_LEVEL
              value: "info"
            - name: PGRST_DB_MAX_ROWS
              value: "1000"
            - name: PGRST_DB_POOL
              value: "10"
            - name: PGRST_DB_POOL_TIMEOUT
              value: "10"
            - name: PGRST_JWT_AUD
              value: "authenticated"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - postgrest
                topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: postgrest
  namespace: platform
  labels:
    app: postgrest
    app.kubernetes.io/name: postgrest
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: supabase-stack
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: postgrest
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP